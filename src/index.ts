// 变量类型
// ---------------------------------------------------------------------
//  any
// let a:any = 1;
// console.log(a)

// ---------------------------------------------------------------------
// number  双精度 64 位浮点值。它可以用来表示整数和分数。
// let b:number=2;
// console.log(b)

// ---------------------------------------------------------------------
// string 使用单引号（'）或双引号（"）来表示字符串类型。反引号（`）来定义多行文本和内嵌表达式。

// ---------------------------------------------------------------------
// boolean 表示逻辑值：true 和 false。

// ---------------------------------------------------------------------
// 数组类型
// // 在元素类型后面加上[]
// let arr: number[] = [1, 2];
// // 或者使用数组泛型
// let arr1: Array<number> = [1, 2];
// console.log(arr,arr1)
// 在vue3.0的源码中这2种方式都会要会用到

// ---------------------------------------------------------------------
// 元组 元组类型用来表示已知元素数量和类型的数组，各元素的类型不必相同，对应位置的类型需要相同。
// let x: [string, number];
// x = ['Runoob', 1];    // 运行正常
// x = [1, 'Runoob'];    // 报错
// vue 3.0中有使用，即定义一个数组，数组里面每个元素的类型是固定的 

// ---------------------------------------------------------------------
// enum 枚举类型用于定义数值集合。
// enum Color { Red, Green, Blue };
// Color的编译结果：
// {
//     0: "Red",
//     1: "Green",
//     2: "Blue",
//     Blue: 2,
//     Green: 1,
//     Red: 0
// }
// let c: Color = Color.Red;
// console.log(c);    // 输出 0
// enum 默认从0开始计

// ---------------------------------------------------------------------
// void 用于标识方法返回值的类型，表示该方法没有返回值。
// function hello(): void {
//     console.log("Hello Runoob");
// }

// ---------------------------------------------------------------------
// null 表示对象值缺失。

// ---------------------------------------------------------------------
// undefined 用于初始化变量为一个未定义的值

// ---------------------------------------------------------------------
// never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。

// 以上11个类型

// ---------------------------------------------------------------------
// 注意点：
// ---------------------------------------------------------------------
// （1）在TypeScript中启用严格的空校验（--strictNullChecks）特性，就可以使得null 和 undefined 只能被赋值给 void 或本身对应的类型
// let a:number = undefined;
// 上面代码是错误的。

// 如果一个类型可能是 null 或 undefined， 可以用 | 来支持多种类型
// let x: number | null | undefined = undefined;
// x = 1; // 运行正确
// x = undefined;    // 运行正确

// ---------------------------------------------------------------------
// never 需要研究？？？
// never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。
// 这意味着声明为 never 类型的变量只能被 never 类型所赋值，在函数中它通常表现为抛出异常或无法执行到终止点（例如无限循环）

// ---------------------------------------------------------------------
// 变量声明
// var [变量名] : [类型] = 值;

// 声明变量的类型及但没有初始值，变量值会设置为 undefined：
// var [变量名] : [类型];
// 声明变量并初始值，但不设置类型类型，该变量可以是任意类型：
// var [变量名] = 值;
// 声明变量没有设置类型和初始值，类型可以是任意类型，默认初始值为 undefined：
// var [变量名];

// ---------------------------------------------------------------------
// 类型断言（Type Assertion） ？？？
// 类型断言可以用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型。
// 它之所以不被称为类型转换，是因为转换通常意味着某种运行时的支持。
// 但是，类型断言纯粹是一个编译时语法，同时，它也是一种为编译器提供关于如何分析代码的方法。

// ---------------------------------------------------------------------
// 类型推断
// 当类型没有给出时，TypeScript 编译器利用类型推断来推断类型。
// let num = 1;
// num='2' 编译错误

// ---------------------------------------------------------------------
// 全局作用域 − 全局变量定义在程序结构的外部，它可以在你代码的任何位置使用。
// 类作用域 − 这个变量也可以称为 字段。类变量声明在一个类里头，但在类的方法外面。 该变量可以通过类的对象来访问。类变量也可以是静态的，静态的变量可以通过类名直接访问。
// 局部作用域 − 局部变量，局部变量只能在声明它的一个代码块（如：方法）中使用。

// var global_num = 12          // 全局变量
// class Numbers {
//    num_val = 13;             // 实例变量
//    static sval = 10;         // 静态变量

//    storeNum():void {
//       var local_num = 14;    // 局部变量
//    }
// }

// 说明在vue3.0中没有使用过static静态变量

// ---------------------------------------------------------------------
// vue3.0中 条件语句使用switch和enum会比较多

// ---------------------------------------------------------------------
// 函数 可选参数
// function buildName(firstName: string, lastName?: string) {
//     if (lastName) {
//         console.log(firstName + " " + lastName)
//         return firstName + " " + lastName;
//     }
//     else
//         return firstName;
// }
// buildName('m','66')

// 函数 默认参数
// function calculate_discount(price:number,rate:number = 0.50) {
//     var discount = price * rate;
//     console.log("计算结果: ",discount);
// }
// calculate_discount(1000)
// calculate_discount(1000,0.30)

// rest 剩余参数
// function addNumbers(...nums:number[]) {  
//     var i;  
//     var sum:number = 0;
   
//     for(i = 0;i<nums.length;i++) {
//        sum = sum + nums[i];
//     }
//     console.log("和为：",sum)
//  }
//  addNumbers(1,2,3)
//  addNumbers(10,10,10,10,10)

// Lambda 函数 即箭头函数

// 函数重载 
// 函数参数的个数，顺序以及参数类型不一样都是重载

// 注意 es6中有默认参数和rest参数，但是目前还没有可选参数

// ---------------------------------------------------------------------
// 数组 
// forEach返回值为undefined，map返回新数组

// ---------------------------------------------------------------------
// 元组
// 数组中元素的数据类型都是相同的，如果存储的元素数据类型不同，则需要使用元组。
// 方法 push pop 解构等
// let aa = [10, "Hello", "World", "typeScript"]
// aa.shift()
// console.log(aa)

// ---------------------------------------------------------------------
// 联合类型
// 联合类型（Union Types）可以通过管道(|)将变量设置多种类型，赋值时可以根据设置的类型来赋值。

// index.ts
// let a: number = 123;

// const h1 = document.createElement("h1");
// h1.innerHTML = "Hello, I am Lison";
// document.body.appendChild(h1);